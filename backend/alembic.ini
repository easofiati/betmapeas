# A generic, example configuration file.
#
# Refer to the documentation for more information:
#   https://alembic.sqlalchemy.org/en/latest/tutorial.html#
#   https://alembic.sqlalchemy.org/en/latest/ini.html

[alembic]
# path to migration scripts
script_location = app/db/migrations

# Entry point for the SQLAlchemy engine
# this is where Alembic will find your database connection details
# Using psycopg2 for synchronous operations in migrations
sqlalchemy.url = postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db/${POSTGRES_DB}

# Where the models are located (needed for autogenerate)
# Ensure this points to the directory containing your SQLAlchemy models.
# For example, if your models are in 'backend/app/models', set this to 'backend.app.models'.
# If you have multiple model locations, list them comma-separated.
# This variable is referenced in env.py (target_metadata).
# If your models are not directly exposed, you may need to import them in env.py.
target_metadata = app.models

# revision identifiers; these can be anything you want, though the default
# "long" format is recommended.
# revision_environment =
# revision_environment = MIGRATION_ID_LENGTH
# revision_environment = MIGRATION_ID_HEX

# template used to generate new revision files.  You can specify a file,
# or a template string that takes "downgrade" and "upgrade" sections.
#
# default =
# template =

# file naming conventions for migration files.
#
# default =
# file_template =
# file_template = %%(rev)s_%%(env)s.py
# file_template = %%(rev)s_%%(env)s_%%(message).py
# file_template = %%(rev)s_%%(env)s_%%(message).py

# set to 'true' to run the environment during 'alembic revision --autogenerate'.
# This allows you to produce a revision based on changes in your declarative
# metadata.  If set to 'false', then this option will be ignored.
# This also defaults to 'false' if there is no 'target_metadata' variable.
#
# default = false
# run_environment_on_autogenerate = true

# version table configuration
# default = alembic_version
# version_table = alembic_version
# version_table_schema = None
# version_table_pk = True
# version_table_column_name = version_num
# version_table_column_type = VARCHAR(32)
# version_table_column_nullable = False
# version_table_column_default = None
# version_table_column_sequence = None

# timezone-aware datetimes stored in MySQL/PostgreSQL as UTC.
# Change to false to use the SQLAlchemy default which is timezone-naive.
# See also: https://alembic.sqlalchemy.org/en/latest/autogenerate.html#time-aware-datetime-in-autogen
# default = true
# timezone_aware = false

# logging configuration
#
# These settings pre-configure standard Python logging for use with Alembic.
#
# The console output uses a handler named "console".  The alembic setup
# configures this handler to output to sys.stdout, the default behavior of
# "alembic upgrade".
#
# The logger named "alembic" receives logging output from Alembic itself.
# Set its level to INFO to see standard output, DEBUG to see all output.
#
# The logger named "sqlalchemy" receives logging output from SQLAlchemy.
# Set its level to INFO to see standard output, DEBUG to see all output.
#
# For more information about Python logging, please see:
# https://docs.python.org/3/library/logging.html#logging-levels
#
# For more information about the config file format, please see:
# https://docs.python.org/3/library/logging.config.html#configuration-file-format

[loggers]
keys = root, alembic, sqlalchemy

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console
qualname =

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[handler_console]
class = StreamHandler
args = (sys.stderr,)
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S
