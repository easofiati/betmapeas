version: '3.9'

services:
  backend:
    build:
      context: ./backend
    volumes:
      - ./backend:/app
    environment:
      - PYTHONUNBUFFERED=1
      - DATABASE_URL=${DATABASE_URL}
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=${DEBUG}
    depends_on:
      - db
    networks:
      - betmapnet

  frontend:
    build:
      context: ./frontend
    # Produção: serve build estático via Nginx
    container_name: frontend-prod
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - betmapnet

  frontend-dev:
    build:
      context: ./frontend
      target: builder
    command: npm run dev -- --host
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "5173:5173"
    environment:
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - backend
    networks:
      - betmapnet
    # Para desenvolvimento, suba este serviço

  db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./backend/betmapeas_database_schema.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - betmapnet

  pgadmin:
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "5050:80"
    volumes:
      - ./.docker/pgadmin:/var/lib/pgadmin
    depends_on:
      - db
    networks:
      - betmapnet

  nginx:
    image: nginx:alpine
    restart: always
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
    depends_on:
      - frontend
      - backend
    networks:
      - betmapnet

  db-backup:
    image: postgres:15
    depends_on:
      - db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgbackups:/backups
    entrypoint: ["/bin/sh", "-c"]
    command: |
      "echo '0 3 * * * pg_dump -U $POSTGRES_USER -h db $POSTGRES_DB | gzip > /backups/backup-$(date +\%Y-\%m-\%d).sql.gz' > /etc/crontabs/root && crond -f -L /dev/stdout"
    networks:
      - betmapnet

volumes:
  pgdata:
  pgbackups:

networks:
  betmapnet:
    driver: bridge 